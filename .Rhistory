ids <- as.data.frame(table(df$Management))
colnames(ids) <- c("ID", "Frequency")
id <- sapply(1:reps, function(i) ids[-i,1])
training <- lapply(1:reps, function(i) df[df$Management %in% id[1:8, i], ])
testing <- lapply(1:reps, function(i) df[df$Management %in% ids[i,1], ])
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3, sampling = "up")
svm <- lapply(1:reps, function(i)
train(behaviour ~., data = training[[i]][,-c(1:3)], method = "svmLinear",
trControl = trctrl,
preProcess = c("center", "scale"),
tuneLength = 10))
pred <- lapply(1:reps, function(i) predict(svm[[i]], testing[[i]][,-c(1:3)]))
table <- lapply(1:reps, function(i) table(pred = pred[[i]], true = testing[[i]][,89]))
cm <- lapply(1:reps, function(i) caret::confusionMatrix(table[[i]]))
## Results ##
accuracy <- sapply(1:reps, function(i) cm[[i]]$overall["Accuracy"])
accuracy <- unname(accuracy)
kappa <- sapply(1:reps, function(i) cm[[i]]$overall["Kappa"])
kappa <- unname(kappa)
sensitivity <- sapply(1:reps, function(i) cm[[i]]$byClass["Sensitivity"])
sensitivity <- unname(sensitivity)
specificity <- sapply(1:reps, function(i) cm[[i]]$byClass["Specificity"])
specificity <- unname(specificity)
precision <- sapply(1:reps, function(i) cm[[i]]$byClass["Precision"])
precision <- unname(precision)
res <- data.frame(accuracy = mean(accuracy, na.rm = TRUE)*100,
kappa = mean(kappa, na.rm = TRUE)*100,
sensitivity = mean(sensitivity, na.rm = TRUE)*100,
specificity = mean(specificity, na.rm = TRUE)*100,
precision = mean(precision, na.rm = TRUE)*100)
write.csv(res, "J:/Chapters/Chapter 5/Data/2. SVM_v2/4. axivity-ruminating-wow-weather_results.csv", row.names = FALSE)
## Importance ##
imp <- lapply(1:reps, function(i)
varImp(svm[[i]]))
imp <- data.frame(sapply(1:reps, function(i) imp[[i]]$importance["calving"]))
imp <- data.frame(t(imp))
imp <- data.frame(colMeans(imp))
imp$variables <- colnames(df)[-c(1:3,89)]
imp <- imp[order(-imp$colMeans.imp.),]
rownames(imp) <- c()
imp <- imp[,c(2,1)]
write.csv(imp, "J:/Chapters/Chapter 5/Data/2. SVM_v2/4. axivity-ruminating-wow-weather_importance.csv", row.names = FALSE)
# Individual animal #
ID <- data.frame(ID = c("36", "47", "116", "511", "530", "555", "574", "575", "669"))
dt <- cbind(ID, accuracy, sensitivity, specificity, precision)
write.csv(dt, "J:/Chapters/Chapter 5/Data/2. SVM_v2/4. axivity-ruminating-wow-weather_individual.csv", row.names = FALSE)
rm(df,cm,dt,id,ID,ids,imp,pred,res,svm,testing,training,accuracy,kappa,precision,sensitivity,specificity,reps, table, trctrl)
##### 4. GPS - ruminating - WOW - weather #####
dl <- wow
dl[is.na(dl)] <- 0
df <- gps
df[is.na(df)] <- 0
df <- merge(df, dl, by = c("Management", "day", "calvday"))
dt <- weather
dt[is.na(dt)] <- 0
df <- merge(df, dt, by = c("Management", "day", "hour", "calvday"))
##### 4. GPS - ruminating - WOW - weather #####
dl <- wow
dl[is.na(dl)] <- 0
df <- gps
df[is.na(df)] <- 0
df <- merge(df, dl, by = c("Management", "day", "calvday"))
dt <- weather
dt[is.na(dt)] <- 0
df <- merge(df, dt, by = c("Management", "day", "calvday"))
dp <- rum
dp[is.na(dp)] <- 0
colnames(dp)[1] <- "Management"
df <- merge(df, dp, by = c("Management", "day", "calvday"))
df$behaviour <- ifelse(df$calvday == 0, "calving", "non-calving")
df$behaviour <- as.factor(df$behaviour)
colnames(df)
df <- df[,c(1:31,33:70)]
rm(dt,dl,dp)
set.seed(123)
reps <- 9
ids <- as.data.frame(table(df$Management))
colnames(ids) <- c("ID", "Frequency")
id <- sapply(1:reps, function(i) ids[-i,1])
training <- lapply(1:reps, function(i) df[df$Management %in% id[1:8, i], ])
testing <- lapply(1:reps, function(i) df[df$Management %in% ids[i,1], ])
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3, sampling = "up")
svm <- lapply(1:reps, function(i)
train(behaviour ~., data = training[[i]][,-c(1:3)], method = "svmLinear",
trControl = trctrl,
preProcess = c("center", "scale"),
tuneLength = 10))
pred <- lapply(1:reps, function(i) predict(svm[[i]], testing[[i]][,-c(1:3)]))
table <- lapply(1:reps, function(i) table(pred = pred[[i]], true = testing[[i]][,69]))
cm <- lapply(1:reps, function(i) caret::confusionMatrix(table[[i]]))
## Results ##
accuracy <- sapply(1:reps, function(i) cm[[i]]$overall["Accuracy"])
accuracy <- unname(accuracy)
kappa <- sapply(1:reps, function(i) cm[[i]]$overall["Kappa"])
kappa <- unname(kappa)
sensitivity <- sapply(1:reps, function(i) cm[[i]]$byClass["Sensitivity"])
sensitivity <- unname(sensitivity)
specificity <- sapply(1:reps, function(i) cm[[i]]$byClass["Specificity"])
specificity <- unname(specificity)
precision <- sapply(1:reps, function(i) cm[[i]]$byClass["Precision"])
precision <- unname(precision)
res <- data.frame(accuracy = mean(accuracy, na.rm = TRUE)*100,
kappa = mean(kappa, na.rm = TRUE)*100,
sensitivity = mean(sensitivity, na.rm = TRUE)*100,
specificity = mean(specificity, na.rm = TRUE)*100,
precision = mean(precision, na.rm = TRUE)*100)
write.csv(res, "J:/Chapters/Chapter 5/Data/2. SVM_v2/4. gps-ruminating-wow-weather_results.csv", row.names = FALSE)
## Importance ##
imp <- lapply(1:reps, function(i)
varImp(svm[[i]]))
imp <- data.frame(sapply(1:reps, function(i) imp[[i]]$importance["calving"]))
imp <- data.frame(t(imp))
imp <- data.frame(colMeans(imp))
imp$variables <- colnames(df)[-c(1:3,69)]
imp <- imp[order(-imp$colMeans.imp.),]
rownames(imp) <- c()
imp <- imp[,c(2,1)]
write.csv(imp, "J:/Chapters/Chapter 5/Data/2. SVM_v2/4. gps-ruminating-wow-weather_importance.csv", row.names = FALSE)
# Individual animal #
ID <- data.frame(ID = c("36", "47", "116", "511", "530", "555", "574", "575", "669"))
dt <- cbind(ID, accuracy, sensitivity, specificity, precision)
write.csv(dt, "J:/Chapters/Chapter 5/Data/2. SVM_v2/4. gps-ruminating-wow-weather_individual.csv", row.names = FALSE)
rm(df,cm,dt,id,ID,ids,imp,pred,res,svm,testing,training,accuracy,kappa,precision,sensitivity,specificity,reps, table, trctrl)
##### 5. Axivity - GPS - ruminating - WOW - weather #####
dl <- wow
dl[is.na(dl)] <- 0
df <- gps
df[is.na(df)] <- 0
df <- merge(df, dl, by = c("Management", "day", "calvday"))
dt <- weather
dt[is.na(dt)] <- 0
df <- merge(df, dt, by = c("Management", "day", "calvday"))
dp <- rum
dp[is.na(dp)] <- 0
colnames(dp)[1] <- "Management"
df <- merge(df, dp, by = c("Management", "day", "calvday"))
dq <- axivity
dq[is.na(dq)] <- 0
colnames(dq)[1] <- "Management"
df <- merge(df, dq, by = c("Management", "day", "calvday"))
df$behaviour <- ifelse(df$calvday == 0, "calving", "non-calving")
df$behaviour <- as.factor(df$behaviour)
colnames(df)
df <- df[,c(1:31,33:118)]
rm(dt,dl,dp,dq)
set.seed(123)
reps <- 9
ids <- as.data.frame(table(df$Management))
colnames(ids) <- c("ID", "Frequency")
id <- sapply(1:reps, function(i) ids[-i,1])
training <- lapply(1:reps, function(i) df[df$Management %in% id[1:8, i], ])
testing <- lapply(1:reps, function(i) df[df$Management %in% ids[i,1], ])
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3, sampling = "up")
svm <- lapply(1:reps, function(i)
train(behaviour ~., data = training[[i]][,-c(1:3)], method = "svmLinear",
trControl = trctrl,
preProcess = c("center", "scale"),
tuneLength = 10))
pred <- lapply(1:reps, function(i) predict(svm[[i]], testing[[i]][,-c(1:3)]))
table <- lapply(1:reps, function(i) table(pred = pred[[i]], true = testing[[i]][,117]))
cm <- lapply(1:reps, function(i) caret::confusionMatrix(table[[i]]))
## Results ##
accuracy <- sapply(1:reps, function(i) cm[[i]]$overall["Accuracy"])
accuracy <- unname(accuracy)
kappa <- sapply(1:reps, function(i) cm[[i]]$overall["Kappa"])
kappa <- unname(kappa)
sensitivity <- sapply(1:reps, function(i) cm[[i]]$byClass["Sensitivity"])
sensitivity <- unname(sensitivity)
specificity <- sapply(1:reps, function(i) cm[[i]]$byClass["Specificity"])
specificity <- unname(specificity)
precision <- sapply(1:reps, function(i) cm[[i]]$byClass["Precision"])
precision <- unname(precision)
res <- data.frame(accuracy = mean(accuracy, na.rm = TRUE)*100,
kappa = mean(kappa, na.rm = TRUE)*100,
sensitivity = mean(sensitivity, na.rm = TRUE)*100,
specificity = mean(specificity, na.rm = TRUE)*100,
precision = mean(precision, na.rm = TRUE)*100)
write.csv(res, "J:/Chapters/Chapter 5/Data/2. SVM_v2/5. axivity-gps-ruminating-wow-weather_results.csv", row.names = FALSE)
## Importance ##
imp <- lapply(1:reps, function(i)
varImp(svm[[i]]))
imp <- data.frame(sapply(1:reps, function(i) imp[[i]]$importance["calving"]))
imp <- data.frame(t(imp))
imp <- data.frame(colMeans(imp))
imp$variables <- colnames(df)[-c(1:3,117)]
imp <- imp[order(-imp$colMeans.imp.),]
rownames(imp) <- c()
imp <- imp[,c(2,1)]
write.csv(imp, "J:/Chapters/Chapter 5/Data/2. SVM_v2/5. axivity-gps-ruminating-wow-weather_importance.csv", row.names = FALSE)
# Individual animal #
ID <- data.frame(ID = c("36", "47", "116", "511", "530", "555", "574", "575", "669"))
dt <- cbind(ID, accuracy, sensitivity, specificity, precision)
write.csv(dt, "J:/Chapters/Chapter 5/Data/2. SVM_v2/5. axivity-gps-ruminating-wow-weather_individual.csv", row.names = FALSE)
rm(df,cm,dt,id,ID,ids,imp,pred,res,svm,testing,training,accuracy,kappa,precision,sensitivity,specificity,reps, table, trctrl)
df <- fetch_survey(surveyID = "SV_6wXoZMOL6A1ww3Y", force_request = TRUE)
View(df)
mapsupplier <- read.csv("./Headandfoot/mapsup.csv")
mapsup <- read.csv("./Headandfoot/mapsup.csv")
View(mapsup)
mapsup <- read.csv("./Headandfoot/mapsup.csv", stringsAsFactors = FALSE)
colnames(mapsup)[5] <- "Are they are Beef21?"
kable(mapsup)
library(kableExtra)
kable(mapsup)
library(qualtRics)
library(dplyr)
library(knitr)
library(kableExtra)
qualtrics_api_credentials(base_url = "syd1.qualtrics.com", api_key = "F3hJKXRfDwka2FJV3sqqDGCNZuqm46sJC6dVKCgE", install = TRUE,
overwrite = TRUE)
readRenviron("~/.Renviron")
df <- fetch_survey(surveyID = "SV_6wXoZMOL6A1ww3Y", force_request = TRUE)
df <- df %>%
filter(Progress == 100)
df <- df[which.max(df$StartDate),]
name <- ifelse(is.na(df$name), FALSE, TRUE)
interest_1 <- ifelse(df$interest_1 == "Yes, I have what I need", FALSE, TRUE)
interest_2 <- ifelse(df$interest_2 == "Yes, I have what I need", FALSE, TRUE)
interest_3 <- ifelse(df$interest_3 == "Yes, I have what I need", FALSE, TRUE)
interest_4 <- ifelse(df$interest_4 == "Yes, I have what I need", FALSE, TRUE)
interest_5 <- ifelse(df$interest_5 == "Yes, I have what I need", FALSE, TRUE)
interest_6 <- ifelse(df$interest_6 == "Yes, I have what I need", FALSE, TRUE)
mapsup <- read.csv("./Headandfoot/mapsup.csv", stringsAsFactors = FALSE)
colnames(mapsup)[5] <- "Are they are Beef21?"
kable(mapsup, align = "llcll", row.names = FALSE)
library(knitr)
knitr::kable(mapsup, align = "llcll", row.names = FALSE)
knitr::kable(mapsup, align = "llcll", row.names = FALSE)
knitr::kable(mapsup, align = "llcll", row.names = FALSE, format = "latex") %>%
kable_styling(latex_options="scale_down")
install.packages("pander")
library(pander)
pander::pander(mapsup)
tinytex::reinstall_tinytex
tinytex::reinstall_tinytex()
# knitr::kable(mapsup, align = "lllll", row.names = FALSE, format = "latex") %>%
#   kable_styling(full_width = F) %>%
#   kableExtra::landscape()
kable(mapsup, "latex", longtable = T, booktabs = T) %>%
kable_styling(latex_options = c("repeat_header"), font_size = 7) %>%
landscape() %>%
column_spec(column = 4, width = ".1in") %>%
kable_styling(full_width = F)
if(interest_1 == TRUE){"#Header\n Is this under the header"} else {""}
"./Headandfoot/Header.png"
plot(cars)
defOut <- knitr::knit_hooks$get("plot")  # save the default plot hook
knitr::knit_hooks$set(plot = function(x, options) {  # set new plot hook ...
x <- defOut(x, options)  # first apply the default hook
if(!is.null(options$wrapfigure)) {  # then, if option wrapfigure is given ...
# create the new opening string for the wrapfigure environment ...
wf <- sprintf("\\begin{wrapfigure}{%s}{%g\\textwidth}", options$wrapfigure[[1]], options$wrapfigure[[2]])
x  <- gsub("\\begin{figure}", wf, x, fixed = T)  # and replace the default one with it.
x  <- gsub("{figure}", "{wrapfigure}", x, fixed = T)  # also replace the environment ending
}
return(x)
})
defOut <- knitr::knit_hooks$get("plot")  # save the default plot hook
knitr::knit_hooks$set(plot = function(x, options) {  # set new plot hook ...
x <- defOut(x, options)  # first apply the default hook
if(!is.null(options$wrapfigure)) {  # then, if option wrapfigure is given ...
# create the new opening string for the wrapfigure environment ...
wf <- sprintf("\\begin{wrapfigure}{%s}{%g\\textwidth}", options$wrapfigure[[1]], options$wrapfigure[[2]])
x  <- gsub("\\begin{figure}", wf, x, fixed = T)  # and replace the default one with it.
x  <- gsub("{figure}", "{wrapfigure}", x, fixed = T)  # also replace the environment ending
}
return(x)
})
plot(mpg ~ hp, data = mtcars)
shiny::runApp('WOWweight')
runApp()
runApp('WOWweight')
runApp('WOWweight')
shiny::runApp('WOWweight')
##### Weight #####
pass <- sprintf("mongodb://%s:%s@datamuster-shard-00-00-8mplm.mongodb.net:27017,datamuster-shard-00-01-8mplm.mongodb.net:27017,datamuster-shard-00-02-8mplm.mongodb.net:27017/test?ssl=true&replicaSet=DataMuster-shard-0&authSource=admin", username, password)
##### Weight #####
pass <- sprintf("mongodb://%s:%s@datamuster-shard-00-00-8mplm.mongodb.net:27017,datamuster-shard-00-01-8mplm.mongodb.net:27017,datamuster-shard-00-02-8mplm.mongodb.net:27017/test?ssl=true&replicaSet=DataMuster-shard-0&authSource=admin", username = user, password = pass)
db <- mongolite::mongo(collection = "BeefWoWData", db = "DMIoT", url = pass, verbose = T)
weight <- db$find()
weight <- weight[which.max(weight$datetime),]
weight <- db$find()
weight <- weight[which.max(weight$datetime),]
weight <- weight$Wt
weight <- db$find()
weight <- weight[which.max(weight$datetime),]
weight <- weight$Wt
runApp('WOWweight')
runApp('WOWweight')
runApp('WOWweight')
weight <<- weight$Wt
runApp('WOWweight')
school = "Central Queensland University"
class = "year 1"
add_school(school = input$school, class = input$class,
lat = schoollat, long = schoollong, weight = weight, username = user, password = pass)
add_school(school = school, class = class,
lat = schoollat, long = schoollong, weight = weight, username = user, password = pass)
runApp('WOWweight')
##### Weight #####
pass <- mongolite::sprintf("mongodb://%s:%s@datamuster-shard-00-00-8mplm.mongodb.net:27017,datamuster-shard-00-01-8mplm.mongodb.net:27017,datamuster-shard-00-02-8mplm.mongodb.net:27017/test?ssl=true&replicaSet=DataMuster-shard-0&authSource=admin",
username = user, password = pass)
##### Weight #####
pass <- sprintf("mongodb://%s:%s@datamuster-shard-00-00-8mplm.mongodb.net:27017,datamuster-shard-00-01-8mplm.mongodb.net:27017,datamuster-shard-00-02-8mplm.mongodb.net:27017/test?ssl=true&replicaSet=DataMuster-shard-0&authSource=admin",
username = user, password = pass)
db <- mongolite::mongo(collection = "BeefWoWData", db = "DMIoT", url = pass, verbose = T)
weight <- db$find()
weight <- weight[which.max(weight$datetime),]
weight <- weight$Wt
weight <<- weight
runApp('WOWweight')
runApp('WOWweight')
weight <<- as.numeric(weight)
runApp('WOWweight')
library(qualtRics)
library(dplyr)
library(knitr)
library(kableExtra)
library(pander)
qualtrics_api_credentials(base_url = "syd1.qualtrics.com", api_key = "F3hJKXRfDwka2FJV3sqqDGCNZuqm46sJC6dVKCgE", install = TRUE,
overwrite = TRUE)
readRenviron("~/.Renviron")
df <- fetch_survey(surveyID = "SV_6wXoZMOL6A1ww3Y", force_request = TRUE)
df <- fetch_survey(surveyID = "SV_6wXoZMOL6A1ww3Y", force_request = TRUE)
df <- df %>%
filter(Progress == 100)
df <- df[which.max(df$StartDate),]
View(df)
runApp('WOWweight')
runApp('WOWweight')
runApp()
runApp('WOWweight')
runApp('WOWweight')
runApp()
runApp('WOWweight')
df0338 <- read.csv("J:/Chapters/Chapter 3/Data/Traditional/2. Epoch/Ruminating/1s/0338.csv", stringsAsFactors = FALSE)
df0338$Hz <- 1:nrow(df0338)
ggplot(data = df0338, aes(x = Hz, y = mean.MV)) + geom_line() + ylim(0,0.5) + xlim(267,767)
df2402 <- read.csv("J:/Chapters/Chapter 3/Data/Traditional/2. Epoch/Ruminating/1s/2402.csv", stringsAsFactors = FALSE)
df2402$Hz <- 1:nrow(df2402)
ggplot(data = df2402, aes(x = Hz, y = mean.MV)) + geom_line() + ylim(0,0.5) + xlim(524,1024)
df4446 <- read.csv("J:/Chapters/Chapter 3/Data/Traditional/2. Epoch/Ruminating/1s/4446(2).csv", stringsAsFactors = FALSE)
df4446$Hz <- 1:nrow(df4446)
ggplot(data = df4446, aes(x = Hz, y = mean.MV)) + geom_line() + ylim(0,0.5) + xlim(523,1023)
df5112 <- read.csv("J:/Chapters/Chapter 3/Data/Traditional/2. Epoch/Ruminating/1s/5112(2).csv", stringsAsFactors = FALSE)
df5112$Hz <- 1:nrow(df5112)
ggplot(data = df5112, aes(x = Hz, y = mean.MV)) + geom_line() + ylim(0,0.5) + xlim(957,1457)
df5443 <- read.csv("J:/Chapters/Chapter 3/Data/Traditional/2. Epoch/Ruminating/1s/5443(1)_1.csv", stringsAsFactors = FALSE)
df5443$Hz <- 1:nrow(df5443)
ggplot(data = df5443, aes(x = Hz, y = mean.MV)) + geom_line() + ylim(0,0.5) + xlim(488,988)
df6107 <- read.csv("J:/Chapters/Chapter 3/Data/Traditional/2. Epoch/Ruminating/1s/6107(3).csv", stringsAsFactors = FALSE)
df6107$Hz <- 1:nrow(df6107)
ggplot(data = df6107, aes(x = Hz, y = mean.MV)) + geom_line() + ylim(0,0.5) + xlim(458,958)
df6301 <- read.csv("J:/Chapters/Chapter 3/Data/Traditional/2. Epoch/Ruminating/1s/6301.csv", stringsAsFactors = FALSE)
df6301$Hz <- 1:nrow(df6301)
ggplot(data = df6301, aes(x = Hz, y = mean.MV)) + geom_line() + ylim(0,0.5) + xlim(40,540)
df6722 <- read.csv("J:/Chapters/Chapter 3/Data/Traditional/2. Epoch/Ruminating/1s/6722(2).csv",
stringsAsFactors = FALSE)
df6722$Hz <- 1:nrow(df6722)
ggplot(data = df6722, aes(x = Hz, y = mean.MV)) + geom_line() + ylim(0,0.5) + xlim(59,559)
df <- cbind(df0338$mean.MV[c(267:767)], df2402$mean.MV[c(524:1024)],
df4446$mean.MV[c(523:1023)], df5112$mean.MV[c(957:1457)], df5443$mean.MV[c(488:988)],
df6107$mean.MV[c(458:958)], df6301$mean.MV[c(40:540)], df6722$mean.MV[c(59:559)])
df <- data.frame(df)
colnames(df) <- c(0338,2402,4446,5112,5443,6107,6301,6722)
dt <- df %>% gather(df)
dt$index <- rep(1:501)
#0338, 6722, 2402
dt <- dt %>%
filter(df == "338" | df == "6722" | df == "2402") %>%
filter(between(index, 1, 500))
ggplot(data = dt, aes(x = index, y = value, colour = df)) + geom_line() + ylim(0,0.3) +
xlim(0,250) +
xlab("Time (secs)") + ylab("MV") +
theme(legend.position = "none",
legend.title = element_blank(), panel.background = element_blank(),
panel.border = element_rect(fill = NA, colour = "black"),
axis.text.x = element_text(size = 15), axis.title.x = element_text(size = 15),
axis.text.y = element_text(size = 15), axis.title.y = element_text(size = 15))
ggplot(data = df0338, aes(x = Hz, y = min.Z)) + geom_line() +
# ylim(0,0.3) +
xlim(0,250) +
xlab("Time (secs)") + ylab("MV") +
theme(legend.position = "none",
legend.title = element_blank(), panel.background = element_blank(),
panel.border = element_rect(fill = NA, colour = "black"),
axis.text.x = element_text(size = 15), axis.title.x = element_text(size = 15),
axis.text.y = element_text(size = 15), axis.title.y = element_text(size = 15))
dt$pause <- ifelse(dt$value < 0.035, "swallow", "chew")
pause <- dt %>%
filter(pause == "swallow")
df0338 <- df0338[,c(8,43)]
df0338$pause <- ifelse(df0338$mean.MV < 0.035, "Swallow", "Chewing")
df0338 <- df0338[c(267:767),]
df0338$Hz <- seq(1:nrow(df0338))
ggplot(data = df0338, aes(x = Hz, y = mean.MV)) +
geom_rect(aes(xmin = Hz-.5, xmax = Hz+.5, ymin = -Inf, ymax = Inf, fill = pause, alpha = 5)) + geom_line() + ylim(0,0.2) +
xlab("Time (secs)") + ylab("MV") + theme(legend.position = "none", legend.title = element_blank())
ggplot(data = df0338, aes(x = Hz, y = mean.MV)) +
geom_rect(aes(xmin = Hz-.5, xmax = Hz+.5, ymin = -Inf, ymax = Inf, fill = pause, alpha = 5)) + geom_line() + ylim(0,0.2) +
xlab("Time (secs)") + ylab("MV") + theme(legend.position = "none", legend.title = element_blank(), panel.background = element_blank(),
panel.border = element_rect(fill = NA, colour = "black"))
ggplot(data = df0338, aes(x = Hz, y = mean.MV)) +
geom_rect(aes(xmin = Hz-.5, xmax = Hz+.5, ymin = -Inf, ymax = Inf, fill = pause, alpha = 5)) + geom_line() + ylim(0,0.2) +
xlab("Time (secs)") + ylab("MV") + theme(legend.position = "none", legend.title = element_blank(), panel.background = element_blank(),
panel.border = element_rect(fill = NA, colour = "black"),
axis.text.x = element_text(size = 15), axis.title.x = element_text(size = 15),
axis.text.y = element_text(size = 15), axis.title.y = element_text(size = 15))
interest_3_4 <- ifelse(df$interest_2 == "Yes, I have what I need" | df$interest_3 == "Yes, I have what I need", FALSE, TRUE)
library(qualtRics)
library(dplyr)
library(knitr)
library(kableExtra)
library(pander)
qualtrics_api_credentials(base_url = "syd1.qualtrics.com", api_key = "F3hJKXRfDwka2FJV3sqqDGCNZuqm46sJC6dVKCgE", install = TRUE,
overwrite = TRUE)
readRenviron("~/.Renviron")
df <- fetch_survey(surveyID = "SV_6wXoZMOL6A1ww3Y", force_request = TRUE)
df <- df %>%
filter(Progress == 100)
df <- df[which.max(df$StartDate),]
name <- ifelse(is.na(df$name), FALSE, TRUE)
interest_1 <- ifelse(df$interest_1 == "Yes, I have what I need", FALSE, TRUE)
interest_2 <- ifelse(df$interest_2 == "Yes, I have what I need", FALSE, TRUE)
interest_3 <- ifelse(df$interest_3 == "Yes, I have what I need", FALSE, TRUE)
interest_4 <- ifelse(df$interest_4 == "Yes, I have what I need", FALSE, TRUE)
interest_5 <- ifelse(df$interest_5 == "Yes, I have what I need", FALSE, TRUE)
interest_6 <- ifelse(df$interest_6 == "Yes, I have what I need", FALSE, TRUE)
interest_3_4 <- ifelse(df$interest_2 == "Yes, I have what I need" | df$interest_3 == "Yes, I have what I need", FALSE, TRUE)
library(DMMongoDB)
df <- read.csv("J:/DataMuster/Glenmoan/animals/animals.csv", stringsAsFactors = FALSE)
df$weaned <- as.character(df$weaned)
add_cattle(RFID = df$RFID, MTag = df$mtag, category = df$category, property = "Glenmoan", paddock = df$pdk, weaned = df$weaned)
mapsup <- read.csv("./Headandfoot/datsup.csv", stringsAsFactors = FALSE)
colnames(mapsup)[5] <- "Are they at Beef21?"
datup <- read.csv("./Headandfoot/datsup.csv", stringsAsFactors = FALSE)
datsup <- read.csv("./Headandfoot/datsup.csv", stringsAsFactors = FALSE)
datsup <- read.csv("./Headandfoot/datsup.csv", stringsAsFactors = FALSE)
colnames(mapsup)[5] <- "Are they at Beef21?"
colnames(datsup)[5] <- "Are they at Beef21?"
# knitr::kable(mapsup, align = "lllll", row.names = FALSE, format = "latex") %>%
#   kable_styling(full_width = F) %>%
#   kableExtra::landscape()
kable(datsup, "latex", booktabs = T) %>%
kable_styling(font_size = 8, stripe_color = "lightblue", latex_options = "striped") %>%
landscape() %>%
column_spec(column = 1, width = "1in") %>%
column_spec(column = 2, width = "2.8in") %>%
column_spec(column = 3, width = "2in") %>%
column_spec(column = 4, width = "2.5in") %>%
column_spec(column = 5, width = "1in") %>%
row_spec(0,bold=TRUE)
View(datsup)
datsup <- read.csv("./Headandfoot/datsup.csv", stringsAsFactors = FALSE)
colnames(datsup)[5] <- "Are they at Beef21?"
datsup <- read.csv("./Headandfoot/datsup.csv", stringsAsFactors = FALSE)
datsup1 <- datsup[c(1:10),]
datsup2 <- datsup[c(11:15),]
datsup <- read.csv("./Headandfoot/datsup.csv", stringsAsFactors = FALSE)
colnames(datsup)[5] <- "Are they at Beef21?"
datsup1 <- datsup[c(1:10),]
datsup2 <- datsup[c(11:15),]
View(datsup1)
datsup <- read.csv("./Headandfoot/datsup.csv", stringsAsFactors = FALSE)
colnames(datsup)[5] <- "Are they at Beef21?"
datsup <- read.csv("./Headandfoot/datsup.csv", stringsAsFactors = FALSE)
colnames(datsup)[5] <- "Are they at Beef21?"
datsup1 <- datsup[c(1:9),]
datsup2 <- datsup[c(10:12),]
qualtrics_api_credentials(base_url = "syd1.qualtrics.com", api_key = "F3hJKXRfDwka2FJV3sqqDGCNZuqm46sJC6dVKCgE", install = TRUE,
overwrite = TRUE)
readRenviron("~/.Renviron")
df <- fetch_survey(surveyID = "SV_6wXoZMOL6A1ww3Y", force_request = TRUE)
df <- fetch_survey(surveyID = "SV_6wXoZMOL6A1ww3Y", force_request = TRUE)
df <- df %>%
filter(Progress == 100)
df <- df[which.max(df$StartDate),]
View(df)
name <- ifelse(is.na(df$name), FALSE, TRUE)
interest_1 <- ifelse(df$interest_1 == "Yes, I have what I need", FALSE, TRUE)
interest_2 <- ifelse(df$interest_2 == "Yes, I have what I need", FALSE, TRUE)
interest_3 <- ifelse(df$interest_3 == "Yes, I have what I need", FALSE, TRUE)
interest_4 <- ifelse(df$interest_4 == "Yes, I have what I need", FALSE, TRUE)
interest_5 <- ifelse(df$interest_5 == "Yes, I have what I need", FALSE, TRUE)
interest_6 <- ifelse(df$interest_6 == "Yes, I have what I need", FALSE, TRUE)
interest_3_4 <- ifelse(df$interest_2 == "Yes, I have what I need" | df$interest_3 == "Yes, I have what I need", FALSE, TRUE)
library(qualtRics)
library(dplyr)
library(knitr)
library(kableExtra)
library(pander)
qualtrics_api_credentials(base_url = "syd1.qualtrics.com", api_key = "F3hJKXRfDwka2FJV3sqqDGCNZuqm46sJC6dVKCgE", install = TRUE,
overwrite = TRUE)
readRenviron("~/.Renviron")
df <- fetch_survey(surveyID = "SV_6wXoZMOL6A1ww3Y", force_request = TRUE)
df <- df %>%
filter(Progress == 100)
df <- df[which.max(df$StartDate),]
interest_1 <- ifelse(df$interest_1 == "Yes, I have what I need", FALSE, TRUE)
interest_2 <- ifelse(df$interest_2 == "Yes, I have what I need", FALSE, TRUE)
interest_3 <- ifelse(df$interest_3 == "Yes, I have what I need", FALSE, TRUE)
interest_4 <- ifelse(df$interest_4 == "Yes, I have what I need", FALSE, TRUE)
interest_5 <- ifelse(df$interest_5 == "Yes, I have what I need", FALSE, TRUE)
interest_6 <- ifelse(df$interest_6 == "Yes, I have what I need", FALSE, TRUE)
interest_3_4 <- ifelse(df$interest_2 == "Yes, I have what I need" | df$interest_3 == "Yes, I have what I need", FALSE, TRUE)
gensup <- read.csv("./Headandfoot/gensup.csv", stringsAsFactors = FALSE)
View(gensup)
gensup <- read.csv("./Headandfoot/gensup.csv", stringsAsFactors = FALSE)
colnames(gensup)[5] <- "Are they at Beef21?"
gensup1 <- gensup[c(1:9),]
gensup2 <- gensup[c(10:19),]
gensup3 <- gensup[c(20:22),]
